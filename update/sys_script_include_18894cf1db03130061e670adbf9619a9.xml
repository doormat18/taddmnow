<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_20712_taddm_now.TADDMHelper</api_name>
        <client_callable>false</client_callable>
        <description>TADDM helper functions</description>
        <name>TADDMHelper</name>
        <script><![CDATA[/**
 * Helper functions for TADDM integration
 */
var TADDMHelper = Class.create();

/**
 * Return host name from fqdn
 */
TADDMHelper.getHostName = function(fqdn)
{
	// nothing to parse
	if (gs.nil(fqdn))
		return null;
	
	// if a space occurs, can't parse
	if (fqdn.indexOf(" ") > -1)
		return null;
			
    // if set to IP address, can't parse
	var ipRegex = new RegExp("^([0-9]{1,3}\\.){3}[0-9]{1,3}$");
	var ipGroups = ipRegex.exec(fqdn);
	if (!gs.nil(ipGroups))
		return null;

	// parse with regex
	try {
		var regex = gs.getProperty('glide.discovery.fqdn.regex', "^([^.]+)\\.((?:[^.]+\\.)+[^.]+)$");
		var fqdnRegex = new RegExp(regex);
		var groups = fqdnRegex.exec(fqdn);
		if (!gs.nil(groups) && groups.length == 3)
		{
			return groups[1];
		}
		else
		{
			// fqdn is just hostname
			return fqdn;
		}
	} catch (e) {
		gs.log("FQDN parsing failed. The regex '" + regexStr + "' was not able to parse '" + fqdn + "'. The error is " + e.message, "warning");
	}
};

/**
 * Return DNS domain name from fqdn
 */
TADDMHelper.getDomainName = function(fqdn)
{
	// nothing to parse
	if (gs.nil(fqdn))
		return null;
	
	// if a space occurs, can't parse
	if (fqdn.indexOf(" ") > -1)
		return null;
			
    // if set to IP address, can't parse
	var ipRegex = new RegExp("^([0-9]{1,3}\\.){3}[0-9]{1,3}$");
	var ipGroups = ipRegex.exec(fqdn);
	if (!gs.nil(ipGroups))
		return null;

    // make sure it has at least 2 dots
    var parts = fqdn.split('.');
    if (parts.length < 3)
		return null;

	// parse with regex
	try {
		var regex = gs.getProperty('glide.discovery.fqdn.regex', "^([^.]+)\\.((?:[^.]+\\.)+[^.]+)$");
		var fqdnRegex = new RegExp(regex);
		var groups = fqdnRegex.exec(fqdn);
		if (groups.length != 3)
			return null;
	
		return groups[2];
	} catch (e) {
		gs.log("FQDN parsing failed. The regex '" + regexStr + "' was not able to parse '" + fqdn + "'. The error is " + e.message, "warning");
	}
};

/**
 * Return global value for discovery_source
 */
TADDMHelper.getDiscoverySource = function()
{
    return 'TADDM';
};

/**
 * Check for nil value
 */
TADDMHelper.nil = function(item)
{
    return gs.nil(item);
};

/**
 * Log INFO message with timestamp prefix
 */
TADDMHelper.logInfo = function(log, msg)
{
	log.info("[" + (new GlideDateTime()).getNumericValue() + "] " + msg);
};

/**
 * Uses serial, vmid, ServiceNow class, and hostSystem JDO class to calculate unique serial
 */
TADDMHelper.calculateSerial = function(serial, vmid, snclass, hostsysjdoclass) {
	
	if (serial == null || serial == '')
		return null;
	
	// if it's a mainframe or aix lpar, then include vmid in serial
	if ((
			snclass === 'cmdb_ci_mainframe_lpar' || 
			snclass === 'cmdb_ci_aix_server' || 
			hostsysjdoclass === 'sys.SystemPComputerSystem' 
		) && 
		vmid != '' )
	{
		serial = serial + ';vmid=' + vmid;
	}
	return serial;
};

/**
 * Expects source to contain u_name, u_fqdn, u_label, u_jdoclass attributes
 */
TADDMHelper.getComputerName = function(source) {
	
	var name = this.getName(source.u_name.toString(), source.u_fqdn.toString());

	var label = source.u_label.toString();
	var cClass = this.getComputerClass(source.u_jdoclass.toString());

	if (cClass === 'cmdb_ci_mainframe_lpar' && label != '')
	{
		// if mainframe LPAR, use label instead of name
		name = label;
	}
	
	if (!gs.nil(name))
	{
		// change case if necessary
		var changeCase = gs.getProperty('glide.discovery.hostname.case', 'No change');
		if (changeCase == 'Lower case')
			name = name.toLowerCase();
		else if (changeCase == 'Upper case') 
			name = name.toUpperCase();
	}
	
	return name;
};

// deprecated, use getComputerName(source)
TADDMHelper.getName = function(name, fqdn) {
	
	// nothing to process
	if (gs.nil(name) && gs.nil(fqdn))
	{
		return null;
	}
	
	// if a space occurs, can't process
	if (!gs.nil(name) && name.indexOf(" ") > -1)
		return null;
	
	// if name is set to fqdn, parse out the hostname
	var domainName = this.getDomainName(name);
	if (domainName != null)
	{
		// name is set to the fqdn, use host name instead
		return name.replace("."+domainName, "");
	}
	
	// try and get hostname from fqdn if name is nil
	if (gs.nil(name) && !gs.nil(fqdn))
	{
		var hostName = this.getHostName(fqdn);
		if (hostName != null)
		{
			// return hostname captured from fqdn
			return hostName;
		}
	}
	
	return name;
};

TADDMHelper.findComputer = function(id) {
    // Find the GUID in the correlation_id field
    var gr = new GlideRecord("cmdb_ci_computer");
	// TODO this probably should be taddm guid instead of correlation
    gr.addQuery("correlation_id", id);
    gr.query();
    if (gr.next())
        return gr.sys_id + '';

    return null;    
};

TADDMHelper.fixCompany = function(company) {
    if (company.endsWith(" Corporation") || company.endsWith(" Corp.") || company.endsWith(" Corp"))
        company = company.substring(0, company.lastIndexOf(" "));

    if (company.endsWith("."))
        company = company.substring(0, company.length - 1);

    if (company.endsWith(" Inc") || company.endsWith(" Ltd"))
        company = company.substring(0, company.lastIndexOf(" "));

    if (company.endsWith(","))
        company = company.substring(0, company.length - 1);

    if (company.endsWith(" Incorporated"))
        company = company.substring(0, company.lastIndexOf(" "));

    if (company.endsWith("(R)"))
        company = company.substring(0, company.length - 3);

    if (company.endsWith("®"))
        company = company.substring(0, company.length - 1);

    if (company.endsWith("™"))
        company = company.substring(0, company.length - 1);

    if (company.endsWith("(TM)"))
        company = company.substring(0, company.length - 4);

    // strip off genuine, its just intel
    if (company.equals("GenuineIntel"))
        company = "Intel";

    // strip off computer if its dell
    if (company.toLowerCase().equals("dell computer"))
        company = "Dell";

    company = company.trim();
    
    return company;
};

TADDMHelper.getComputerClass = function(jdoclass) {

	if ( jdoclass.match(/LinuxUnitaryComputerSystem/i) != null ){
		return "cmdb_ci_linux_server";
	} else
	if ( jdoclass.match(/WindowsComputerSystem/i) != null ){
		return "cmdb_ci_win_server";
	} else
	if ( jdoclass.match(/AixUnitaryComputerSystem/i) != null ){
		return "cmdb_ci_aix_server";
	} else
	if ( jdoclass.match(/SunSPARCUnitaryComputerSystem/i) != null ){
		return "cmdb_ci_solaris_server";
	} else
	if ( jdoclass.match(/VmwareUnitaryComputerSystem/i) != null ){
		return "cmdb_ci_esx_server";
	} else
	if ( jdoclass.match(/HpUxUnitaryComputerSystem/i) != null ){
		return "cmdb_ci_hpux_server";
	} else
	if ( jdoclass.match(/ZSeriesComputerSystem/i) != null ){
		return "cmdb_ci_mainframe";
	} else
	if ( jdoclass.match(/sys.zOS.LPAR/i) != null || jdoclass.match(/sys.zOS.ZVMGuest/i) != null ){
		return "cmdb_ci_mainframe_lpar";
	}
	else {
		return "cmdb_ci_server";
	}
};

TADDMHelper.prototype = {
    initialize: function() {
    },

    type: 'TADDMHelper'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-07-02 12:45:13</sys_created_on>
        <sys_id>18894cf1db03130061e670adbf9619a9</sys_id>
        <sys_mod_count>19</sys_mod_count>
        <sys_name>TADDMHelper</sys_name>
        <sys_package display_value="TADDM Now" source="x_20712_taddm_now">dd9e5530db43130061e670adbf9619b8</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="TADDM Now">dd9e5530db43130061e670adbf9619b8</sys_scope>
        <sys_update_name>sys_script_include_18894cf1db03130061e670adbf9619a9</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-09-24 18:35:48</sys_updated_on>
    </sys_script_include>
</record_update>
