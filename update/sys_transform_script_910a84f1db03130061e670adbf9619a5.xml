<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_transform_script">
    <sys_transform_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <map display_value="TADDM CompSys">74915ac9db03130061e670adbf96192e</map>
        <order>100</order>
        <script><![CDATA[var IMPORT_NAME = "TADDM";
var SOURCE_MSG = "Import transform entry script";
var TADDM_CI = IMPORT_NAME + " import CI: " + source.u_name + " (" + source.u_guid + ")";

ignore = (function runTransformScript(source, map, log, target, isInsert, isUpdate) {
	
	var sguid = source.u_guid.toString();
	var tguid = target.x_20712_taddm_now_taddm_guid.toString();
	if (!TADDMHelper.nil(sguid) && !TADDMHelper.nil(tguid) && (sguid != tguid))
	{
		/*
		 * Note: This is evidence that there might be duplicates in TADDM and requires further investigation.
		 *  In this case, the first CI in to CMDB wins. If duplicates are resolved in TADDM and this causes
		 *  the guid to change, the guid in the CMDB must be changed manually to match TADDM and this will
		 *  allow the data in CMDB to be updated.
		 */
		var msg = TADDM_CI + " will not have a record in the CMDB due to mismatched source/target guids: ";
		msg = msg + sguid + "!=" + tguid;
		TADDMHelper.logInfo(log, msg);
		return true;
	}
	
	//
	// MANDATORY FIELD CHECK
	//
	// Recommended to use SQL to enforce mandatory fields rather than the code below
	/*
	var mandatoryFields = ['manufacturer', 'model', 'osname', 'osversion', 'location'];
	var guid = source.u_guid.toString();
	
	for (var i = 0; i < mandatoryFields.length; i++) {
		var fieldName = 'u_' + mandatoryFields[i];
		var val = source.getValue(fieldName);
		if (val == null)
		{
			log.info("Mandatory field '" + fieldName + "' not set, ignoring record " + guid);
			return true;
		}
	}
	*/
	
	// ignore insert if TADDM scan date is older than 90 days
	var lastmod = parseFloat(source.u_lastmodifiedtime.toString());
	var lastScan = new GlideDateTime();
	lastScan.setNumericValue(lastmod);

	// get stale data period from properties, default 90 days
	var graceper = parseInt(gs.getProperty("taddm.discovery.stale_data_days", "90"));
	if (isInsert && lastScan < gs.daysAgoStart(graceper)) {
		logIgnore();
		return true;
	}
	else if (isUpdate) {
		// ignore update if exising CI is retired in grace period
		var sys_class_name = TADDMHelper.getComputerClass(source);
		var retiredServer = getRetiredServer(sys_class_name, target.sys_id);
		if (JSUtil.notNil(retiredServer)) {
			// get date status change occurred for retirement
			var retired = getRetiredDate(retiredServer);
			if (JSUtil.notNil(retired)) {
				// add 30 days grace to retired date
				var gracePeriodDays = 30;
				retired.addDays(gracePeriodDays);

				if (lastScan.compareTo(retired) <  0) {
					log.info(TADDM_CI + ' will not have a record in the CMDB due '
							 + 'to matching retired server within grace period.', SOURCE_MSG);
					return true;
				} else {
					log.info(TADDM_CI + ' will be updating retired server because '
							  + 'scanned after grace period.', SOURCE_MSG);
				}
			} else {
				log.info(TADDM_CI + ' failed to get retirement date for matching server.', SOURCE_MSG);
			}

		} else {
			log.info(TADDM_CI + ' will be updated. No retired server found.', SOURCE_MSG);
		}
	}
	
	// NORMALIZATION
	var osVersion = source.u_osversion.toString();
	if (osVersion != null && osVersion != '')
	{
		source.u_osversion = osVersion.replace(/\n/g, " ");
	}

	var man = source.u_manufacturer.toString();
	if (man != null && man != '')
	{
		if (man == "Sun_Microsystems")
			man = "Sun Microsystems";
		else if (man == "Microsoft Corporation")
			man = "Microsoft";
		else if (man == "Dell Computer Corporation")
			man = "Dell Inc.";
		source.u_manufacturer = man;
	}

	var osname = source.u_osname.toString();
	if (osname != null && osname != '')
	{
		if (osname == "SunOS")
			osname = "Solaris";
		source.u_osname = osname;
	}
	
	return false;
})(source, map, log, target, action==="insert", action==="update");

function getRetiredServer(klass, sysid) {
	var gr = new GlideRecord(klass);
	gr.addQuery("sys_id", sysid);
	gr.addQuery("install_status", "7"); // Retired
	gr.query();
	if (gr.next()) {
		return gr;
	} else {
		return null;
	}
}

function getRetiredDate(gr) {
	// get date that status was changed to specified status
	var auditGr = new GlideRecord('sys_audit');
	auditGr.addQuery('tablename', gr.sys_class_name);
	auditGr.addQuery('fieldname', 'install_status');
	auditGr.addQuery('documentkey', gr.sys_id);
	auditGr.addQuery('newvalue', 7); // 7 = retired
	auditGr.orderByDesc('sys_created_on');
	auditGr.query();
	if (auditGr.next()) {
		var statusDt = auditGr.sys_created_on.getGlideObject();
		return statusDt;
	} else {
		return null;
	}
}

function logIgnore() {
	log.info("[" + (new GlideDateTime()).getNumericValue() + "] " + TADDM_CI + " will not have a record in the CMDB due to stale data.");
}]]></script>
        <sys_class_name>sys_transform_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-07-02 12:47:24</sys_created_on>
        <sys_id>910a84f1db03130061e670adbf9619a5</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>onBefore</sys_name>
        <sys_package display_value="TADDM Now" source="x_20712_taddm_now">dd9e5530db43130061e670adbf9619b8</sys_package>
        <sys_policy/>
        <sys_scope display_value="TADDM Now">dd9e5530db43130061e670adbf9619b8</sys_scope>
        <sys_update_name>sys_transform_script_910a84f1db03130061e670adbf9619a5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-09-19 15:14:21</sys_updated_on>
        <when>onBefore</when>
    </sys_transform_script>
</record_update>
